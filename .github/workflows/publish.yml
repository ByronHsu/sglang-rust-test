name: Build and Publish Python Package

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags

env:
  CARGO_TERM_COLOR: always

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }} with python == ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools-rust wheel build twine
    
    - name: Build wheel
      run: python -m build
    
    - name: Store wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist/*.whl

  publish:
    needs: build_wheels
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Download all wheels
      uses: actions/download-artifact@v3
      with:
        path: dist
    
    - name: Move wheels to dist
      run: |
        mkdir -p final_dist
        find dist -name "*.whl" -exec mv {} final_dist \;
  
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools-rust wheel build twine
        
    - name: Build source distribution
      run: python -m build --sdist
    
    - name: Move sdist to final dist
      run: mv dist/*.tar.gz final_dist/
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload final_dist/*